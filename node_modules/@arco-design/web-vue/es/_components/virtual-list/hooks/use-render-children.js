import { toRefs, cloneVNode, watch } from "vue";
const findElement = (node) => {
  var _a;
  let res = (_a = node == null ? void 0 : node.$el) != null ? _a : node;
  while (res && !res.tagName) {
    res = res.nextSibling;
  }
  return res;
};
function useRenderChildren(props, events = {}) {
  const {
    internalData,
    visibleData,
    itemRender
  } = toRefs(props);
  const itemRenderCache = new Map();
  const renderChildren = () => {
    return visibleData.value.map(({
      item,
      index,
      key
    }) => {
      if (!itemRenderCache.has(key)) {
        const [node] = itemRender.value({
          item,
          index
        });
        let dom;
        const resizeHandler = () => {
          var _a;
          if (dom) {
            (_a = events.onItemResize) == null ? void 0 : _a.call(events, dom, key);
          }
        };
        itemRenderCache.set(key, cloneVNode(node, {
          key,
          ref: (el) => {
            if (!dom) {
              dom = findElement(el);
            }
          },
          onVnodeMounted() {
            resizeHandler();
          },
          onVnodeUpdated() {
            resizeHandler();
          }
        }));
      }
      return itemRenderCache.get(key);
    });
  };
  watch([internalData, itemRender], () => {
    itemRenderCache.clear();
  });
  return renderChildren;
}
export { useRenderChildren };
