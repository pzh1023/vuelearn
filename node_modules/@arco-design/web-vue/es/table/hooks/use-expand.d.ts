import { Ref } from 'vue';
import type { TableData, TableExpandable } from '../interface';
import type { EmitFn2 } from '../../_utils/types';
export declare const useExpand: ({ expandedKeys, defaultExpandedKeys, defaultExpandAllRows, expandable, allRowKeys, emit, }: {
    expandedKeys: Ref<string[] | undefined>;
    defaultExpandedKeys: Ref<string[] | undefined>;
    defaultExpandAllRows: Ref<boolean>;
    expandable: Ref<TableExpandable | undefined>;
    allRowKeys: Ref<string[]>;
    emit: ((event: "expand", rowKey: string, record: TableData) => void) & ((event: "update:expandedKeys", rowKeys: string[]) => void) & ((event: "expandedChange", rowKeys: string[]) => void);
}) => {
    expandedRowKeys: import("vue").ComputedRef<string[]>;
    handleExpand: (rowKey: string, record: TableData) => void;
    expand: (rowKey: string | string[], expanded?: boolean) => void;
    expandAll: (expanded?: boolean) => void;
};
