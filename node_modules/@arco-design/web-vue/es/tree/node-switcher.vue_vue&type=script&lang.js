import { defineComponent, toRefs, computed, h } from "vue";
import RenderFunction from "../_components/render-function.js";
import IconLoading from "../icon/icon-loading/index.js";
import IconHover from "../_components/icon-hover.js";
import IconCaretDown from "../icon/icon-caret-down/index.js";
import IconFile from "../icon/icon-file/index.js";
import useTreeContext from "./hooks/use-tree-context.js";
import usePickSlots from "../_hooks/use-pick-slots.js";
var _sfc_main = defineComponent({
  name: "TreeNodeSwitcher",
  components: {
    IconLoading,
    RenderFunction
  },
  props: {
    prefixCls: String,
    expanded: Boolean,
    loading: Boolean,
    showLine: Boolean,
    isLeaf: Boolean,
    treeNodeData: {
      type: Object
    },
    icons: {
      type: Object
    }
  },
  emits: ["click"],
  setup(props, {
    slots,
    emit
  }) {
    const {
      icons
    } = toRefs(props);
    const treeContext = useTreeContext();
    const nodeSwitcherIcon = usePickSlots(slots, "switcher-icon");
    const nodeLoadingIcon = usePickSlots(slots, "loading-icon");
    return {
      switcherIcon: computed(() => {
        var _a;
        return ((_a = icons == null ? void 0 : icons.value) == null ? void 0 : _a.switcherIcon) || nodeSwitcherIcon.value || treeContext.switcherIcon;
      }),
      loadingIcon: computed(() => {
        var _a;
        return ((_a = icons == null ? void 0 : icons.value) == null ? void 0 : _a.loadingIcon) || nodeLoadingIcon.value || treeContext.loadingIcon;
      }),
      onClick(e) {
        emit("click", e);
      }
    };
  },
  render() {
    const {
      prefixCls,
      switcherIcon,
      loadingIcon,
      onClick,
      expanded,
      loading,
      isLeaf,
      showLine,
      treeNodeData
    } = this;
    if (loading) {
      return loadingIcon ? loadingIcon(treeNodeData) : h(IconLoading);
    }
    let icon = null;
    let needIconHover = false;
    if (!isLeaf) {
      const defaultIcon = showLine ? h("span", {
        class: `${prefixCls}-${expanded ? "minus" : "plus"}-icon`
      }) : h(IconCaretDown);
      icon = switcherIcon ? switcherIcon(treeNodeData) : defaultIcon;
      needIconHover = !showLine;
    } else if (showLine) {
      icon = switcherIcon ? switcherIcon(treeNodeData) : h(IconFile);
    }
    if (!icon)
      return null;
    const content = h("span", {
      class: `${prefixCls}-switcher-icon`,
      onClick
    }, icon);
    return needIconHover ? h(IconHover, {
      class: `${prefixCls}-icon-hover`
    }, () => content) : content;
  }
});
export { _sfc_main as default };
