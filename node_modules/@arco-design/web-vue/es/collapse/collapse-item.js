import { defineComponent, getCurrentInstance, inject, computed, ref, watch, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, createBlock, withCtx, createCommentVNode, renderSlot, createTextVNode, toDisplayString, createVNode, Transition, mergeProps, withDirectives, vShow } from "vue";
import { getPrefixCls } from "../_utils/global-config.js";
import { collapseKey } from "./context.js";
import IconHover from "../_components/icon-hover.js";
import IconCaretRight from "../icon/icon-caret-right/index.js";
import IconCaretLeft from "../icon/icon-caret-left/index.js";
import { isNumber } from "../_utils/is.js";
import _export_sfc from "../_virtual/plugin-vue_export-helper.js";
const _sfc_main = defineComponent({
  name: "CollapseItem",
  components: { IconHover, IconCaretRight, IconCaretLeft },
  props: {
    key: String,
    header: String,
    disabled: {
      type: Boolean,
      default: false
    },
    showExpandIcon: {
      type: Boolean,
      default: true
    },
    destroyOnHide: {
      type: Boolean,
      default: false
    }
  },
  setup(props) {
    var _a;
    const instance = getCurrentInstance();
    const prefixCls = getPrefixCls("collapse-item");
    const collapseCtx = inject(collapseKey, {});
    const key = instance && isNumber(instance == null ? void 0 : instance.vnode.key) ? instance.vnode.key : String((_a = instance == null ? void 0 : instance.vnode.key) != null ? _a : "");
    const isActive = computed(() => {
      var _a2;
      return (_a2 = collapseCtx.activeKeys) == null ? void 0 : _a2.includes(key);
    });
    const mergedDestroyOnHide = computed(() => collapseCtx.destroyOnHide || props.destroyOnHide);
    const mounted = ref(mergedDestroyOnHide.value ? isActive.value : true);
    const expandIconPosition = computed(() => {
      var _a2;
      return (_a2 = collapseCtx == null ? void 0 : collapseCtx.expandIconPosition) != null ? _a2 : "left";
    });
    const handleClick = (e) => {
      var _a2;
      if (!props.disabled) {
        (_a2 = collapseCtx.handleClick) == null ? void 0 : _a2.call(collapseCtx, key, e);
      }
    };
    watch(isActive, (isActive2) => {
      if (isActive2 && !mounted.value) {
        mounted.value = true;
      }
    });
    const transitionEvents = {
      onEnter: (el) => {
        el.style.height = `${el.scrollHeight}px`;
      },
      onAfterEnter: (el) => {
        el.style.height = "auto";
      },
      onBeforeLeave: (el) => {
        el.style.height = `${el.scrollHeight}px`;
      },
      onLeave: (el) => {
        el.style.height = "0";
      },
      onAfterLeave: () => {
        if (mergedDestroyOnHide.value) {
          mounted.value = false;
        }
      }
    };
    const cls = computed(() => [
      prefixCls,
      {
        [`${prefixCls}-active`]: isActive.value
      }
    ]);
    const headerCls = computed(() => [
      `${prefixCls}-header`,
      `${prefixCls}-header-${collapseCtx == null ? void 0 : collapseCtx.expandIconPosition}`,
      {
        [`${prefixCls}-header-disabled`]: props.disabled
      }
    ]);
    const iconCls = computed(() => [
      {
        [`${prefixCls}-icon-right`]: (collapseCtx == null ? void 0 : collapseCtx.expandIconPosition) === "right"
      }
    ]);
    const contentCls = computed(() => [
      `${prefixCls}-content`,
      {
        [`${prefixCls}-content-expend`]: isActive.value
      }
    ]);
    return {
      prefixCls,
      cls,
      headerCls,
      iconCls,
      contentCls,
      isActive,
      mounted,
      expandIconPosition,
      transitionEvents,
      handleClick
    };
  }
});
const _hoisted_1 = ["aria-disabled", "aria-expanded"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_icon_caret_left = resolveComponent("icon-caret-left");
  const _component_icon_caret_right = resolveComponent("icon-caret-right");
  const _component_icon_hover = resolveComponent("icon-hover");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.cls)
  }, [
    createElementVNode("div", {
      role: "button",
      "aria-disabled": _ctx.disabled,
      "aria-expanded": _ctx.isActive,
      tabindex: "0",
      class: normalizeClass(_ctx.headerCls),
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
    }, [
      _ctx.showExpandIcon ? (openBlock(), createBlock(_component_icon_hover, {
        key: 0,
        prefix: _ctx.prefixCls,
        class: normalizeClass(_ctx.iconCls),
        disabled: _ctx.disabled
      }, {
        default: withCtx(() => [
          _ctx.expandIconPosition === "right" ? (openBlock(), createBlock(_component_icon_caret_left, {
            key: 0,
            class: normalizeClass(`${_ctx.prefixCls}-expand-icon`)
          }, null, 8, ["class"])) : (openBlock(), createBlock(_component_icon_caret_right, {
            key: 1,
            class: normalizeClass(`${_ctx.prefixCls}-expand-icon`)
          }, null, 8, ["class"]))
        ]),
        _: 1
      }, 8, ["prefix", "class", "disabled"])) : createCommentVNode("v-if", true),
      createElementVNode("div", {
        class: normalizeClass(`${_ctx.prefixCls}-header-title`)
      }, [
        renderSlot(_ctx.$slots, "header", {}, () => [
          createTextVNode(toDisplayString(_ctx.header), 1)
        ])
      ], 2),
      _ctx.$slots.extra ? (openBlock(), createElementBlock("div", {
        key: 1,
        class: normalizeClass(`${_ctx.prefixCls}-header-extra`)
      }, [
        renderSlot(_ctx.$slots, "extra")
      ], 2)) : createCommentVNode("v-if", true)
    ], 10, _hoisted_1),
    createVNode(Transition, mergeProps({ name: "collapse-slider" }, _ctx.transitionEvents), {
      default: withCtx(() => [
        withDirectives(createElementVNode("div", {
          role: "region",
          class: normalizeClass(_ctx.contentCls)
        }, [
          _ctx.mounted ? (openBlock(), createElementBlock("div", {
            key: 0,
            ref: "contentBoxRef",
            class: normalizeClass(`${_ctx.prefixCls}-content-box`)
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2)) : createCommentVNode("v-if", true)
        ], 2), [
          [vShow, _ctx.isActive]
        ])
      ]),
      _: 3
    }, 16)
  ], 2);
}
var CollapseItem = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { CollapseItem as default };
