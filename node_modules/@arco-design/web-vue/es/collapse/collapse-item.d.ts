declare const _default: import("vue").DefineComponent<{
    key: StringConstructor;
    header: StringConstructor;
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    showExpandIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    destroyOnHide: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    prefixCls: string;
    cls: import("vue").ComputedRef<(string | {
        [x: string]: boolean | undefined;
    })[]>;
    headerCls: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
    iconCls: import("vue").ComputedRef<{
        [x: string]: boolean;
    }[]>;
    contentCls: import("vue").ComputedRef<(string | {
        [x: string]: boolean | undefined;
    })[]>;
    isActive: import("vue").ComputedRef<boolean | undefined>;
    mounted: import("vue").Ref<boolean | undefined>;
    expandIconPosition: import("vue").ComputedRef<string>;
    transitionEvents: {
        onEnter: (el: HTMLDivElement) => void;
        onAfterEnter: (el: HTMLDivElement) => void;
        onBeforeLeave: (el: HTMLDivElement) => void;
        onLeave: (el: HTMLDivElement) => void;
        onAfterLeave: () => void;
    };
    handleClick: (e: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    key?: unknown;
    header?: unknown;
    disabled?: unknown;
    showExpandIcon?: unknown;
    destroyOnHide?: unknown;
} & {
    disabled: boolean;
    destroyOnHide: boolean;
    showExpandIcon: boolean;
} & {
    key?: string | undefined;
    header?: string | undefined;
}>, {
    disabled: boolean;
    destroyOnHide: boolean;
    showExpandIcon: boolean;
}>;
export default _default;
