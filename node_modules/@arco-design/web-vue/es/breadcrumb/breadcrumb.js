import { defineComponent, toRefs, ref, computed, provide, reactive, createVNode, mergeProps } from "vue";
import { getPrefixCls } from "../_utils/global-config.js";
import { breadcrumbInjectKey } from "./context.js";
import { getAllElements } from "../_utils/vue-utils.js";
var _Breadcrumb = defineComponent({
  name: "Breadcrumb",
  props: {
    maxCount: {
      type: Number,
      default: 0
    }
  },
  setup(props, {
    slots
  }) {
    const {
      maxCount
    } = toRefs(props);
    const prefixCls = getPrefixCls("breadcrumb");
    const total = ref(0);
    const needHide = computed(() => maxCount.value > 0 && total.value > maxCount.value + 1);
    provide(breadcrumbInjectKey, reactive({
      total,
      maxCount,
      needHide,
      slots
    }));
    return () => {
      var _a, _b;
      const children = getAllElements((_b = (_a = slots.default) == null ? void 0 : _a.call(slots)) != null ? _b : []);
      if (total.value !== children.length) {
        total.value = children.length;
      }
      return createVNode("div", {
        "role": "list",
        "class": prefixCls
      }, [children.map((child, index) => {
        var _a2;
        child.props = mergeProps((_a2 = child.props) != null ? _a2 : {}, {
          index
        });
        return child;
      })]);
    };
  }
});
export { _Breadcrumb as default };
