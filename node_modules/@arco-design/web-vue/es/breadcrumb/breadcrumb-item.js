import { defineComponent, inject, computed, createVNode, Fragment, mergeProps } from "vue";
import { getPrefixCls } from "../_utils/global-config.js";
import IconMore from "../icon/icon-more/index.js";
import IconObliqueLine from "../icon/icon-oblique-line/index.js";
import { breadcrumbInjectKey } from "./context.js";
var BreadcrumbItem = defineComponent({
  name: "BreadcrumbItem",
  inheritAttrs: false,
  props: {
    index: {
      type: Number,
      default: 0
    }
  },
  setup(props, {
    slots,
    attrs
  }) {
    const prefixCls = getPrefixCls("breadcrumb-item");
    const breadcrumbCtx = inject(breadcrumbInjectKey, void 0);
    const show = computed(() => {
      if (breadcrumbCtx && breadcrumbCtx.needHide) {
        if (props.index > 1 && props.index <= breadcrumbCtx.total - breadcrumbCtx.maxCount) {
          return false;
        }
      }
      return true;
    });
    const displayMore = computed(() => {
      if (breadcrumbCtx && breadcrumbCtx.needHide) {
        return props.index === 1;
      }
      return false;
    });
    const showSeparator = computed(() => breadcrumbCtx ? props.index < breadcrumbCtx.total - 1 : true);
    return () => {
      var _a, _b, _c, _d;
      if (show.value) {
        return createVNode(Fragment, null, [createVNode("div", mergeProps({
          "role": "listitem",
          "class": prefixCls
        }, displayMore.value ? {
          "aria-label": "ellipses of breadcrumb items"
        } : void 0, attrs), [displayMore.value ? createVNode(IconMore, null, null) : (_a = slots.default) == null ? void 0 : _a.call(slots)]), showSeparator.value && createVNode("div", {
          "aria-hidden": "true",
          "class": `${prefixCls}-separator`
        }, [(_d = (_c = breadcrumbCtx == null ? void 0 : (_b = breadcrumbCtx.slots).separator) == null ? void 0 : _c.call(_b)) != null ? _d : createVNode(IconObliqueLine, null, null)])]);
      }
      return null;
    };
  }
});
export { BreadcrumbItem as default };
