"use strict";
var vue = require("vue");
var globalConfig = require("../_utils/global-config.js");
var context = require("./context.js");
var iconHover = require("../_components/icon-hover.js");
var index = require("../icon/icon-caret-right/index.js");
var index$1 = require("../icon/icon-caret-left/index.js");
var is = require("../_utils/is.js");
var pluginVue_exportHelper = require("../_virtual/plugin-vue_export-helper.js");
const _sfc_main = vue.defineComponent({
  name: "CollapseItem",
  components: { IconHover: iconHover, IconCaretRight: index, IconCaretLeft: index$1 },
  props: {
    key: String,
    header: String,
    disabled: {
      type: Boolean,
      default: false
    },
    showExpandIcon: {
      type: Boolean,
      default: true
    },
    destroyOnHide: {
      type: Boolean,
      default: false
    }
  },
  setup(props) {
    var _a;
    const instance = vue.getCurrentInstance();
    const prefixCls = globalConfig.getPrefixCls("collapse-item");
    const collapseCtx = vue.inject(context.collapseKey, {});
    const key = instance && is.isNumber(instance == null ? void 0 : instance.vnode.key) ? instance.vnode.key : String((_a = instance == null ? void 0 : instance.vnode.key) != null ? _a : "");
    const isActive = vue.computed(() => {
      var _a2;
      return (_a2 = collapseCtx.activeKeys) == null ? void 0 : _a2.includes(key);
    });
    const mergedDestroyOnHide = vue.computed(() => collapseCtx.destroyOnHide || props.destroyOnHide);
    const mounted = vue.ref(mergedDestroyOnHide.value ? isActive.value : true);
    const expandIconPosition = vue.computed(() => {
      var _a2;
      return (_a2 = collapseCtx == null ? void 0 : collapseCtx.expandIconPosition) != null ? _a2 : "left";
    });
    const handleClick = (e) => {
      var _a2;
      if (!props.disabled) {
        (_a2 = collapseCtx.handleClick) == null ? void 0 : _a2.call(collapseCtx, key, e);
      }
    };
    vue.watch(isActive, (isActive2) => {
      if (isActive2 && !mounted.value) {
        mounted.value = true;
      }
    });
    const transitionEvents = {
      onEnter: (el) => {
        el.style.height = `${el.scrollHeight}px`;
      },
      onAfterEnter: (el) => {
        el.style.height = "auto";
      },
      onBeforeLeave: (el) => {
        el.style.height = `${el.scrollHeight}px`;
      },
      onLeave: (el) => {
        el.style.height = "0";
      },
      onAfterLeave: () => {
        if (mergedDestroyOnHide.value) {
          mounted.value = false;
        }
      }
    };
    const cls = vue.computed(() => [
      prefixCls,
      {
        [`${prefixCls}-active`]: isActive.value
      }
    ]);
    const headerCls = vue.computed(() => [
      `${prefixCls}-header`,
      `${prefixCls}-header-${collapseCtx == null ? void 0 : collapseCtx.expandIconPosition}`,
      {
        [`${prefixCls}-header-disabled`]: props.disabled
      }
    ]);
    const iconCls = vue.computed(() => [
      {
        [`${prefixCls}-icon-right`]: (collapseCtx == null ? void 0 : collapseCtx.expandIconPosition) === "right"
      }
    ]);
    const contentCls = vue.computed(() => [
      `${prefixCls}-content`,
      {
        [`${prefixCls}-content-expend`]: isActive.value
      }
    ]);
    return {
      prefixCls,
      cls,
      headerCls,
      iconCls,
      contentCls,
      isActive,
      mounted,
      expandIconPosition,
      transitionEvents,
      handleClick
    };
  }
});
const _hoisted_1 = ["aria-disabled", "aria-expanded"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_icon_caret_left = vue.resolveComponent("icon-caret-left");
  const _component_icon_caret_right = vue.resolveComponent("icon-caret-right");
  const _component_icon_hover = vue.resolveComponent("icon-hover");
  return vue.openBlock(), vue.createElementBlock("div", {
    class: vue.normalizeClass(_ctx.cls)
  }, [
    vue.createElementVNode("div", {
      role: "button",
      "aria-disabled": _ctx.disabled,
      "aria-expanded": _ctx.isActive,
      tabindex: "0",
      class: vue.normalizeClass(_ctx.headerCls),
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
    }, [
      _ctx.showExpandIcon ? (vue.openBlock(), vue.createBlock(_component_icon_hover, {
        key: 0,
        prefix: _ctx.prefixCls,
        class: vue.normalizeClass(_ctx.iconCls),
        disabled: _ctx.disabled
      }, {
        default: vue.withCtx(() => [
          _ctx.expandIconPosition === "right" ? (vue.openBlock(), vue.createBlock(_component_icon_caret_left, {
            key: 0,
            class: vue.normalizeClass(`${_ctx.prefixCls}-expand-icon`)
          }, null, 8, ["class"])) : (vue.openBlock(), vue.createBlock(_component_icon_caret_right, {
            key: 1,
            class: vue.normalizeClass(`${_ctx.prefixCls}-expand-icon`)
          }, null, 8, ["class"]))
        ]),
        _: 1
      }, 8, ["prefix", "class", "disabled"])) : vue.createCommentVNode("v-if", true),
      vue.createElementVNode("div", {
        class: vue.normalizeClass(`${_ctx.prefixCls}-header-title`)
      }, [
        vue.renderSlot(_ctx.$slots, "header", {}, () => [
          vue.createTextVNode(vue.toDisplayString(_ctx.header), 1)
        ])
      ], 2),
      _ctx.$slots.extra ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 1,
        class: vue.normalizeClass(`${_ctx.prefixCls}-header-extra`)
      }, [
        vue.renderSlot(_ctx.$slots, "extra")
      ], 2)) : vue.createCommentVNode("v-if", true)
    ], 10, _hoisted_1),
    vue.createVNode(vue.Transition, vue.mergeProps({ name: "collapse-slider" }, _ctx.transitionEvents), {
      default: vue.withCtx(() => [
        vue.withDirectives(vue.createElementVNode("div", {
          role: "region",
          class: vue.normalizeClass(_ctx.contentCls)
        }, [
          _ctx.mounted ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            ref: "contentBoxRef",
            class: vue.normalizeClass(`${_ctx.prefixCls}-content-box`)
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2)) : vue.createCommentVNode("v-if", true)
        ], 2), [
          [vue.vShow, _ctx.isActive]
        ])
      ]),
      _: 3
    }, 16)
  ], 2);
}
var CollapseItem = /* @__PURE__ */ pluginVue_exportHelper(_sfc_main, [["render", _sfc_render]]);
module.exports = CollapseItem;
