"use strict";
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports[Symbol.toStringTag] = "Module";
function getValidScrollTop(scrollTop, scrollRange) {
  return scrollTop < 0 ? 0 : scrollTop > scrollRange ? scrollRange : scrollTop;
}
function getScrollPercentage({
  scrollTop,
  scrollHeight,
  clientHeight
}) {
  const scrollLength = scrollHeight - clientHeight;
  return scrollLength ? getValidScrollTop(scrollTop, scrollLength) / scrollLength : 0;
}
function getLocationItem(scrollPtg, itemCount) {
  const itemIndex = Math.floor(scrollPtg * itemCount);
  const itemTopPtg = itemIndex / itemCount;
  const offsetPtg = (scrollPtg - itemTopPtg) / (1 / itemCount);
  return {
    index: itemIndex,
    offsetPtg: Number.isNaN(offsetPtg) ? 0 : offsetPtg
  };
}
function getRangeIndex(scrollPtg, itemCount, visibleCount) {
  const { index, offsetPtg } = getLocationItem(scrollPtg, itemCount);
  const beforeCount = Math.ceil(scrollPtg * visibleCount);
  const afterCount = Math.ceil((1 - scrollPtg) * visibleCount);
  return {
    itemIndex: index,
    itemOffsetPtg: offsetPtg,
    startIndex: Math.max(0, index - beforeCount),
    endIndex: Math.min(itemCount - 1, index + afterCount)
  };
}
function getItemRelativeTop({
  itemHeight,
  itemOffsetPtg,
  scrollPtg,
  clientHeight
}) {
  if (scrollPtg === 1)
    return clientHeight - itemHeight;
  return clientHeight * scrollPtg - itemHeight * itemOffsetPtg;
}
function getItemAbsoluteTop(_a) {
  var _b = _a, { scrollTop } = _b, rest = __objRest(_b, ["scrollTop"]);
  return scrollTop + getItemRelativeTop(rest);
}
function getCompareItemRelativeTop({
  locatedItemRelativeTop,
  locatedItemIndex,
  compareItemIndex,
  startIndex,
  endIndex,
  getItemKeyByIndex,
  getItemHeightOrDefault
}) {
  let compareItemTop = locatedItemRelativeTop;
  const compareItemKey = getItemKeyByIndex(compareItemIndex);
  if (compareItemIndex <= locatedItemIndex) {
    for (let index = locatedItemIndex; index >= startIndex; index -= 1) {
      const key = getItemKeyByIndex(index);
      if (key === compareItemKey) {
        break;
      }
      const prevItemKey = getItemKeyByIndex(index - 1);
      compareItemTop -= getItemHeightOrDefault(prevItemKey);
    }
  } else {
    for (let index = locatedItemIndex; index <= endIndex; index += 1) {
      const key = getItemKeyByIndex(index);
      if (key === compareItemKey) {
        break;
      }
      compareItemTop += getItemHeightOrDefault(key);
    }
  }
  return compareItemTop;
}
exports.getCompareItemRelativeTop = getCompareItemRelativeTop;
exports.getItemAbsoluteTop = getItemAbsoluteTop;
exports.getItemRelativeTop = getItemRelativeTop;
exports.getLocationItem = getLocationItem;
exports.getRangeIndex = getRangeIndex;
exports.getScrollPercentage = getScrollPercentage;
exports.getValidScrollTop = getValidScrollTop;
