"use strict";
var vue = require("vue");
var globalConfig = require("../_utils/global-config.js");
var index = require("../icon/icon-more/index.js");
var index$1 = require("../icon/icon-oblique-line/index.js");
var context = require("./context.js");
var BreadcrumbItem = vue.defineComponent({
  name: "BreadcrumbItem",
  inheritAttrs: false,
  props: {
    index: {
      type: Number,
      default: 0
    }
  },
  setup(props, {
    slots,
    attrs
  }) {
    const prefixCls = globalConfig.getPrefixCls("breadcrumb-item");
    const breadcrumbCtx = vue.inject(context.breadcrumbInjectKey, void 0);
    const show = vue.computed(() => {
      if (breadcrumbCtx && breadcrumbCtx.needHide) {
        if (props.index > 1 && props.index <= breadcrumbCtx.total - breadcrumbCtx.maxCount) {
          return false;
        }
      }
      return true;
    });
    const displayMore = vue.computed(() => {
      if (breadcrumbCtx && breadcrumbCtx.needHide) {
        return props.index === 1;
      }
      return false;
    });
    const showSeparator = vue.computed(() => breadcrumbCtx ? props.index < breadcrumbCtx.total - 1 : true);
    return () => {
      var _a, _b, _c, _d;
      if (show.value) {
        return vue.createVNode(vue.Fragment, null, [vue.createVNode("div", vue.mergeProps({
          "role": "listitem",
          "class": prefixCls
        }, displayMore.value ? {
          "aria-label": "ellipses of breadcrumb items"
        } : void 0, attrs), [displayMore.value ? vue.createVNode(index, null, null) : (_a = slots.default) == null ? void 0 : _a.call(slots)]), showSeparator.value && vue.createVNode("div", {
          "aria-hidden": "true",
          "class": `${prefixCls}-separator`
        }, [(_d = (_c = breadcrumbCtx == null ? void 0 : (_b = breadcrumbCtx.slots).separator) == null ? void 0 : _c.call(_b)) != null ? _d : vue.createVNode(index$1, null, null)])]);
      }
      return null;
    };
  }
});
module.exports = BreadcrumbItem;
