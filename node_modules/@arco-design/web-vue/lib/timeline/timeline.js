"use strict";
var vue = require("vue");
var globalConfig = require("../_utils/global-config.js");
var context = require("./context.js");
var item = require("./item.js");
var index = require("../spin/index.js");
var pluginVue_exportHelper = require("../_virtual/plugin-vue_export-helper.js");
const _sfc_main = vue.defineComponent({
  name: "Timeline",
  components: {
    Item: item,
    Spin: index
  },
  props: {
    reverse: {
      type: Boolean
    },
    direction: {
      type: String,
      default: "vertical"
    },
    mode: {
      type: String,
      default: "left"
    },
    pending: {
      type: Boolean
    },
    labelPosition: {
      type: String,
      default: "same"
    }
  },
  setup(props, { slots }) {
    const prefixCls = globalConfig.getPrefixCls("timeline");
    const hasPending = vue.computed(() => {
      return props.pending || slots.pending;
    });
    const {
      reverse: reverseRef,
      direction: directionRef,
      labelPosition: labelPositionRef,
      mode: modeRef
    } = vue.toRefs(props);
    const itemsRef = vue.ref([]);
    function addItem(item2) {
      itemsRef.value.push(item2);
    }
    function removeItem(uid) {
      const index2 = itemsRef.value.findIndex((item2) => item2.uid === uid);
      if (index2 !== -1) {
        itemsRef.value.splice(index2, 1);
      }
    }
    const timelineContext = vue.reactive({
      addItem,
      removeItem,
      items: itemsRef.value,
      direction: directionRef,
      reverse: reverseRef,
      labelPosition: labelPositionRef,
      mode: modeRef
    });
    vue.provide(context.timelineInjectionKey, timelineContext);
    const cls = vue.computed(() => {
      return [
        prefixCls,
        `${prefixCls}-${props.mode}`,
        `${prefixCls}-direction-${props.direction}`,
        {
          [`${prefixCls}-is-reverse`]: props.reverse
        }
      ];
    });
    return {
      prefixCls,
      hasPending,
      cls
    };
  }
});
const _hoisted_1 = { key: 0 };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_spin = vue.resolveComponent("spin");
  const _component_Item = vue.resolveComponent("Item");
  return vue.openBlock(), vue.createElementBlock("div", {
    role: "list",
    class: vue.normalizeClass(_ctx.cls)
  }, [
    vue.renderSlot(_ctx.$slots, "default"),
    _ctx.hasPending ? (vue.openBlock(), vue.createBlock(_component_Item, {
      key: 0,
      "line-type": "dashed"
    }, {
      dot: vue.withCtx(() => [
        _ctx.$slots.dot ? vue.renderSlot(_ctx.$slots, "dot", { key: 0 }) : (vue.openBlock(), vue.createBlock(_component_spin, {
          key: 1,
          size: 12
        }))
      ]),
      default: vue.withCtx(() => [
        _ctx.pending !== true ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_1, vue.toDisplayString(_ctx.pending), 1)) : vue.createCommentVNode("v-if", true)
      ]),
      _: 3
    })) : vue.createCommentVNode("v-if", true)
  ], 2);
}
var _Timeline = /* @__PURE__ */ pluginVue_exportHelper(_sfc_main, [["render", _sfc_render]]);
module.exports = _Timeline;
